var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/context.ts
var context_exports = {};
__export(context_exports, {
  getAllPages: () => getAllPages,
  getCurrentLevelPages: () => getCurrentLevelPages,
  getPagesUnderRoute: () => getPagesUnderRoute
});
function getContext(name) {
  if (!globalThis.__nextra_internal__) {
    throw new Error(`Nextra context not found. Please make sure you are using "${name}" of "nextra/context" on a Nextra page.`);
  }
  return globalThis.__nextra_internal__;
}
function normalizeMeta(meta) {
  if (typeof meta === "string") {
    meta = {
      title: meta
    };
  }
  return meta;
}
function filter(pageMap, activeLevel) {
  var _a;
  let activeLevelPages;
  let meta = ((_a = pageMap.find((item) => item.name === "meta.json")) == null ? void 0 : _a.meta) || {};
  const metaKeys = Object.keys(meta);
  const items = [];
  for (const item of pageMap) {
    if (item.name === "meta.json")
      continue;
    const page = __spreadProps(__spreadValues({}, item), {
      meta: normalizeMeta(meta[item.name])
    });
    if (item.children) {
      const filteredChildren = filter(item.children, activeLevel);
      page.children = filteredChildren[0];
      if (filteredChildren[1]) {
        activeLevelPages = filteredChildren[1];
      } else if (page.route === activeLevel) {
        activeLevelPages = activeLevelPages || page.children;
      }
    }
    items.push(page);
  }
  return [
    items.sort((a, b) => {
      const indexA = metaKeys.indexOf(a.name);
      const indexB = metaKeys.indexOf(b.name);
      if (indexA === -1 && indexB === -1)
        return a.name < b.name ? -1 : 1;
      if (indexA === -1)
        return 1;
      if (indexB === -1)
        return -1;
      return indexA - indexB;
    }),
    activeLevelPages
  ];
}
function getAllPages() {
  const internal = getContext("getAllPages");
  return filter(internal.pageMap)[0];
}
function getCurrentLevelPages() {
  const internal = getContext("getCurrentLevelPages");
  return filter(internal.pageMap, internal.route)[1] || [];
}
function getPagesUnderRoute(route) {
  const internal = getContext("getPagesUnderRoute");
  return filter(internal.pageMap, route)[1] || [];
}
module.exports = __toCommonJS(context_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getAllPages,
  getCurrentLevelPages,
  getPagesUnderRoute
});
