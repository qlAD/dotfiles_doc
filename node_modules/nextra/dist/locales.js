var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/locales.ts
var locales_exports = {};
__export(locales_exports, {
  locales: () => locales,
  withLocales: () => withLocales
});
var import_server = require("next/server");
var PUBLIC_FILE = /\.(.*)$/;
function locales(request) {
  const { nextUrl } = request;
  const shouldHandleLocale = !PUBLIC_FILE.test(nextUrl.pathname) && !nextUrl.pathname.includes("/api/") && !nextUrl.pathname.includes("/_next/") && nextUrl.locale !== "";
  if (!shouldHandleLocale)
    return;
  const fullUrl = nextUrl.toString();
  const localeInPath = fullUrl.slice(fullUrl.indexOf("//" + nextUrl.host) + nextUrl.host.length + 3).slice(0, -(nextUrl.pathname + nextUrl.search).length);
  let finalLocale;
  if (localeInPath) {
    finalLocale = localeInPath;
  } else {
    if (request.cookies["NEXT_LOCALE"]) {
      try {
        nextUrl.locale = request.cookies["NEXT_LOCALE"];
      } catch (err) {
      }
    }
    finalLocale = nextUrl.locale;
    if (finalLocale !== nextUrl.defaultLocale) {
      return import_server.NextResponse.redirect(new URL("/" + finalLocale + nextUrl.pathname + nextUrl.search, request.url));
    }
  }
  let pathname = nextUrl.pathname || "/";
  if (pathname === "/")
    pathname += "index";
  if (!pathname.endsWith("." + finalLocale)) {
    return import_server.NextResponse.rewrite(new URL("/" + finalLocale + pathname + "." + finalLocale + nextUrl.search, request.url));
  }
}
function withLocales(middleware) {
  return (...args) => {
    return locales(args[0]) || middleware(...args);
  };
}
module.exports = __toCommonJS(locales_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  locales,
  withLocales
});
